@prefix stage: <http://localhost:8080/modeling/stage#>.
@prefix elmo: <http://bp4mc2.org/elmo/def#>.
@prefix html: <http://www.w3.org/1999/xhtml/vocab#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix container: <http://linkeddata.ordina.nl/modeling/container/>.
@prefix containerlocal: <http://localhost:8080/modeling/container/>.

container:profiel-xlsx a elmo:Container;
  rdfs:label "Upload Excel profiel";
  elmo:contains stage:Menu;
	elmo:replaces containerlocal:profiel;
  elmo:representation elmo:UploadRepresentation;
  elmo:translator elmo:TableExcelTranslator;
  elmo:query stage:PostUploadQuery;
.
containerlocal:profiel-xlsx a elmo:Container;
  rdfs:label "Upload Excel profiel";
  elmo:contains stage:Menu;
	elmo:replaces containerlocal:profiel;
  elmo:representation elmo:UploadRepresentation;
  elmo:translator elmo:TableExcelTranslator;
  elmo:query stage:PostUploadQuery;
.
container:profiel a elmo:Container;
  elmo:contains stage:Menu;
  elmo:replaces containerlocal:profiel;
.
containerlocal:profiel a elmo:Container;
  elmo:contains stage:Menu;
.

# Post query: fix some things that can't be fixed in the excel
# - Create sh:minCount from shxl:cardinality
# - Create sh:maxCount from shxl:cardinality
# - Set sh:nodeKind sh:BlankNode for a class of stereotype shxl:Datatype
# - Create correct shape for waardelijsten:
#   - A version for the situation that sublists don't exist
#   - A version for the situation with sublists
# - Combine labels in case of a waardelijst with sublists.
# - Create subclassing from shxl:parent
stage:PostUploadQuery a elmo:Query;
  elmo:query '''
    PREFIX container: <http://localhost:8080/modeling/container/>
    PREFIX shxl: <http://bp4mc2.org/def/shacl-xl#>
    PREFIX sh: <http://www.w3.org/ns/shacl#>
    INSERT INTO container:profiel {
      ?prop sh:minCount ?mincount
    }
    WHERE {
      GRAPH container:profiel {
        ?prop a sh:PropertyShape.
        ?prop shxl:cardinality ?cardinality.
        BIND (1 as ?mincount)
        FILTER (strbefore(?cardinality,"..")="1")
      }
    }
    INSERT INTO container:profiel {
      ?prop sh:maxCount ?mincount
    }
    WHERE {
      GRAPH container:profiel {
        ?prop a sh:PropertyShape.
        ?prop shxl:cardinality ?cardinality.
        BIND (1 as ?mincount)
        FILTER (strafter(?cardinality,"..")="1")
      }
    }
    INSERT INTO container:profiel {
      ?prop sh:nodeKind sh:BlankNode
    }
    WHERE {
      GRAPH container:profiel {
        ?prop a sh:PropertyShape.
        ?prop sh:class ?class.
        ?datatype sh:targetClass ?class.
        ?datatype shxl:stereotype shxl:Datatype
      }
    }
    INSERT INTO container:profiel {
      ?node sh:property [
        sh:path skos:inScheme;
        sh:hasValue ?sscheme
      ]
    }
    WHERE {
      SELECT ?node (sample(?scheme) as ?sscheme)
      WHERE {
        GRAPH container:profiel {
          ?node a sh:NodeShape.
          ?node rdfs:seeAlso ?scheme.
        }
      }
      GROUP BY ?node
      HAVING (count(?scheme)=1)
    }
    CLEAR GRAPH container:profieltemp
    INSERT {
      GRAPH container:profieltemp {
        ?node sh:property [
          sh:path skos:inScheme;
          sh:in ?thelist
        ]
      }
    }
    WHERE {
      GRAPH container:profiel {
        {
          SELECT ?node
            WHERE {
              ?node a sh:NodeShape.
              ?node rdfs:seeAlso ?scheme.
            }
          GROUP BY ?node
          HAVING (count(distinct ?scheme)!=1)
        }
        BIND (iri(concat("urn:list:",str(?node),":0")) as ?thelist)
      }
    }
    INSERT {
      GRAPH container:profieltemp {
        ?item rdf:first ?list.
        ?item rdf:rest ?test
      }
    }
    WHERE {
      GRAPH container:profiel {
        SELECT distinct ?node ?list
              (iri(concat(?base,":",?pos)) as ?item)
              (if(strbefore(?total,str(?list))="",rdf:nil,iri(concat(?base,":",?pos+1))) as ?test)
        WHERE {
          ?node a sh:NodeShape.
          ?node rdfs:seeAlso ?list.
          {
          SELECT ?node (group_concat(?scheme; separator="|") as ?total)
            WHERE {
              ?node a sh:NodeShape.
              ?node rdfs:seeAlso ?scheme.
            }
          GROUP BY ?node
            HAVING (count(distinct ?scheme)!=1)
          }
          BIND (strlen(replace(strafter(?total,str(?list)),"[^|]","")) as ?pos)
          BIND (concat("urn:list:",str(?node)) as ?base)
        }
        GROUP BY ?node
      }
    }
    INSERT {
      GRAPH container:profieltemp {
        ?prev ?p [
          rdf:first ?first;
          rdf:rest ?rest;
          owl:sameAs ?item
        ]
      }
    }
    WHERE {
      GRAPH container:profieltemp {
        ?prev ?p ?item.
        ?item rdf:first ?first.
        ?item rdf:rest ?rest.
      }
    }
    INSERT {
      GRAPH container:profieltemp {
        ?bitem rdf:rest ?brest
      }
    }
    WHERE {
      GRAPH container:profieltemp {
        ?bitem rdf:rest ?rest.
        ?brest owl:sameAs ?rest.
      }
    }
    DELETE {
      GRAPH container:profieltemp {
        ?bitem owl:sameAs ?item.
        ?sitem ?spitem ?item.
        ?item ?pitem ?oitem
      }
    }
    WHERE {
      GRAPH container:profieltemp {
        ?bitem owl:sameAs ?item.
        ?sitem ?spitem ?item.
        ?item ?pitem ?oitem
      }
    }
    INSERT {
      GRAPH container:profiel {
        ?s ?p ?o
      }
    }
    WHERE {
      GRAPH container:profieltemp {
        ?s ?p ?o
      }
    }
    DELETE {
      GRAPH container:profiel {
        ?node rdfs:label ?orglabel
      }
    }
    INSERT {
      GRAPH container:profiel {
        ?node rdfs:label ?glabel
      }
    }
    WHERE {
      GRAPH container:profiel {
        ?node rdfs:label ?orglabel
        {
          SELECT ?node (strlang(group_concat(distinct ?label; separator=", "),"en") as ?glabel)
          WHERE {
            ?node a sh:NodeShape.
            ?node rdfs:seeAlso ?scheme.
            ?node rdfs:label ?label
          }
          GROUP BY ?node
          HAVING (count(?label)!=1)
        }
      }
    }
    DELETE FROM container:profiel {
      ?node rdfs:seeAlso ?scheme.
    }
    WHERE {
      GRAPH container:profiel {
        ?node a sh:NodeShape.
        ?node rdfs:seeAlso ?scheme.
      }
    }
    INSERT INTO container:profiel {
      ?subclass a rdfs:Class.
      ?subclass rdfs:subClassOf ?class.
    }
    WHERE {
      SELECT ?subclass (iri(concat(?namespace,strafter(?parent,":"))) as ?class)
      WHERE {
        GRAPH container:profiel {
          ?node shxl:parent ?parent.
          ?node sh:targetClass ?subclass.
          ?voc sh:prefix ?prefix.
          ?voc sh:namespace ?namespace.
          FILTER (strbefore(?parent,":")=str(?prefix))
        }
      }
    }
    DELETE {
      GRAPH container:profiel {
        ?node sh:name ?name
      }
    }
    INSERT {
      GRAPH container:profiel {
        ?node sh:name ?label
      }
    }
    WHERE {
      GRAPH container:profiel {
        ?node a sh:NodeShape.
        ?node sh:name ?name.
        FILTER (str(?name) = ":")
        ?node rdfs:label ?label.
        FILTER (lang(?label)="en")
      }
    }
  '''
.

containerlocal:prefix-xlsx a elmo:Container;
  rdfs:label "Upload Excel vocabularies";
  elmo:contains stage:Menu;
  elmo:replaces containerlocal:prefix;
  elmo:representation elmo:UploadRepresentation;
  elmo:translator elmo:TableExcelTranslator;
  elmo:query stage:PostUploadPrefixQuery;
.
containerlocal:prefix a elmo:Container;
  elmo:contains stage:Menu;
.
stage:PostUploadPrefixQuery a elmo:Query;
  elmo:query '''
    PREFIX container: <http://localhost:8080/modeling/container/>
    PREFIX sh: <http://www.w3.org/ns/shacl#>
    INSERT INTO container:profiel {
      ?voc a owl:Ontology.
      ?voc sh:prefix ?prefix.
      ?voc sh:namespace ?namespace.
    }
    WHERE {
      GRAPH container:prefix {
        ?voc a owl:Ontology.
        ?voc sh:prefix ?prefix.
        ?voc sh:namespace ?namespace.
      }
    }
  '''
.

containerlocal:guidelines-xlsx a elmo:Container;
  rdfs:label "Upload Excel guidelines";
  elmo:contains stage:Menu;
  elmo:replaces containerlocal:guidelines;
  elmo:representation elmo:UploadRepresentation;
  elmo:translator elmo:TableExcelTranslator;
  elmo:query stage:PostUploadGuidelinesQuery;
.
containerlocal:prefix a elmo:Container;
  elmo:contains stage:Menu;
.
stage:PostUploadGuidelinesQuery a elmo:Query;
  elmo:query '''
    PREFIX container: <http://localhost:8080/modeling/container/>
    DELETE FROM container:profiel {
      ?s ?p ?o
    }
    WHERE {
      GRAPH container:guidelines {
        ?s skos:inScheme <http://linkeddata.ordina.nl/id/scheme/Guideline>.
        ?s ?p ?o
      }
    }
    INSERT INTO container:profiel {
      ?s ?p ?o
    }
    WHERE {
      GRAPH container:guidelines {
        ?s skos:inScheme <http://bp4mc2.org/inspire/id/scheme/Guideline>.
        ?s ?p ?o
      }
    }
  '''
.

containerlocal:addprofiel a elmo:Container;
  rdfs:label "Upload and add RDF";
  elmo:contains stage:Menu;
  elmo:representation elmo:UploadRepresentation;
  elmo:query stage:PostUploadAddQuery;
.
stage:PostUploadAddQuery a elmo:Query;
  elmo:query '''
    PREFIX container: <http://localhost:8080/modeling/container/>
    INSERT INTO container:profiel {
      ?s ?p ?o
    }
    WHERE {
      GRAPH container:addprofiel {
        ?s ?p ?o
      }
    }
  ''';
.
